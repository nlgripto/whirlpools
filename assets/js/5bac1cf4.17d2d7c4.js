"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[2700],{808:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>r,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Legacy SDK/Basic Usage/Reading Whirlpool Accounts","title":"Reading Whirlpool Accounts","description":"The SDK provides the following methods to fetch and parse data from Whirlpool accounts on-chain.","source":"@site/docs/04-Legacy SDK/01-Basic Usage/02-Reading Whirlpool Accounts.md","sourceDirName":"04-Legacy SDK/01-Basic Usage","slug":"/Legacy SDK/Basic Usage/Reading Whirlpool Accounts","permalink":"/Legacy SDK/Basic Usage/Reading Whirlpool Accounts","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/04-Legacy SDK/01-Basic Usage/02-Reading Whirlpool Accounts.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Setup Whirlpool Context","permalink":"/Legacy SDK/Basic Usage/Setup Whirlpool Context"},"next":{"title":"Building Transactions","permalink":"/Legacy SDK/Basic Usage/Building Transactions"}}');var c=t(1085),s=t(1184);const a={},i="Reading Whirlpool Accounts",r={},l=[{value:"Fetching Accounts",id:"fetching-accounts",level:2},{value:"1. Account Fetcher",id:"1-account-fetcher",level:3},{value:"2. Parsing fetched AccountInfo data",id:"2-parsing-fetched-accountinfo-data",level:3},{value:"Whirlpool Client",id:"whirlpool-client",level:2},{value:"Deriving Account Addresses",id:"deriving-account-addresses",level:2}];function h(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(o.header,{children:(0,c.jsx)(o.h1,{id:"reading-whirlpool-accounts",children:"Reading Whirlpool Accounts"})}),"\n",(0,c.jsx)(o.p,{children:"The SDK provides the following methods to fetch and parse data from Whirlpool accounts on-chain."}),"\n",(0,c.jsx)(o.h2,{id:"fetching-accounts",children:"Fetching Accounts"}),"\n",(0,c.jsx)(o.p,{children:"The Typescript SDK has types setup to help you parse the corresponding accounts on-chain."}),"\n",(0,c.jsx)(o.h3,{id:"1-account-fetcher",children:"1. Account Fetcher"}),"\n",(0,c.jsxs)(o.p,{children:["Use the ",(0,c.jsx)(o.a,{href:"https://dev.orca.so/legacy/classes/WhirlpoolAccountFetcher.html",children:"AccountFetcher"})," class's get functions to fetch and parse the Whirlpool account that you need. Note that this class also provides caching options."]}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-tsx",children:"const fetcher = new WhirlpoolAccountFetcher(connection);\nconst config: WhirlpoolsConfigData = await fetcher.getConfig(CONFIG_PUBLIC_KEY);\n\nconst poolAddress = PDAUtil.getPool(...);\nconst pool: WhirlpoolData = await fetcher.getPool(poolAddress);\n"})}),"\n",(0,c.jsx)(o.h3,{id:"2-parsing-fetched-accountinfo-data",children:"2. Parsing fetched AccountInfo data"}),"\n",(0,c.jsxs)(o.p,{children:["If you already have the Buffer from fetching the AccountInfo, use the Parsables classes (eg. ",(0,c.jsx)(o.a,{href:"https://dev.orca.so/legacy/classes/ParsableWhirlpool.html",children:"ParsableWhirlpool"}),") in the SDK to parse account buffer data into readable types."]}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-tsx",children:"const whirlpoolAccountInfo: Buffer = ...\nconst whirlpool: WhirlpoolData = ParsableWhirlpool.parse(accountInfoData)\n"})}),"\n",(0,c.jsx)(o.h2,{id:"whirlpool-client",children:"Whirlpool Client"}),"\n",(0,c.jsxs)(o.p,{children:["If you are already using ",(0,c.jsx)(o.a,{href:"https://dev.orca.so/legacy/interfaces/WhirlpoolClient.html",children:"WhirlpoolClient"}),", you can fetch the data from the ",(0,c.jsx)(o.code,{children:"Whirlpool"})," or ",(0,c.jsx)(o.code,{children:"Position"})," class directly."]}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-tsx",children:"const context = new WhirlpoolContext(...);\nconst fetcher = new AccountFetcher(context.provider.connection);\nconst client = buildWhirlpoolClient(context, fetcher);\nconst pool = await client.getPool(poolAddress);\nconst position = await client.getPosition(positionAddress);\n\nconst poolData: WhirlpoolData = pool.getData();\nconst positionData: PositionData = position.getData();\n\n// Perform Action...\n\nconst newestData = pool.refreshData();\n"})}),"\n",(0,c.jsx)(o.h2,{id:"deriving-account-addresses",children:"Deriving Account Addresses"}),"\n",(0,c.jsxs)(o.p,{children:["Almost all Whirlpools accounts are Program Derived Addresses. Use the ",(0,c.jsx)(o.a,{href:"https://dev.orca.so/legacy/classes/PDAUtil.html",children:"PDAUtil"})," class to derive the required addresses to access on-chain accounts."]})]})}function d(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,c.jsx)(o,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},1184:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>i});var n=t(4041);const c={},s=n.createContext(c);function a(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);