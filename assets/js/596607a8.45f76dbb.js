"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[945],{1184:(o,e,i)=>{i.d(e,{R:()=>l,x:()=>c});var n=i(4041);const t={},s=n.createContext(t);function l(o){const e=n.useContext(s);return n.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function c(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(t):o.components||t:l(o.components),n.createElement(s.Provider,{value:e},o.children)}},5578:(o,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"Legacy SDK/Position Management/Closing a Position","title":"Closing a Position","description":"To close a position, you must first withdraw all liquidity and collect all fees and rewards from the position. You can then call the closePosition instruction to close and burn the position NFT.","source":"@site/docs/04-Legacy SDK/03-Position Management/03-Closing a Position.md","sourceDirName":"04-Legacy SDK/03-Position Management","slug":"/Legacy SDK/Position Management/Closing a Position","permalink":"/Legacy SDK/Position Management/Closing a Position","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/04-Legacy SDK/03-Position Management/03-Closing a Position.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Modify Liquidity","permalink":"/Legacy SDK/Position Management/Modify Liquidity"},"next":{"title":"Collect Fees and Rewards","permalink":"/Legacy SDK/Position Management/Collect Fees and Rewards"}}');var t=i(1085),s=i(1184);const l={},c="Closing a Position",a={},r=[{value:"Whirlpool Client - Sample Code",id:"whirlpool-client---sample-code",level:2},{value:"Instruction - Sample Code",id:"instruction---sample-code",level:2},{value:"Common Errors",id:"common-errors",level:2}];function d(o){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...o.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"closing-a-position",children:"Closing a Position"})}),"\n",(0,t.jsxs)(e.p,{children:["To close a position, you must first withdraw all liquidity and collect all fees and rewards from the position. You can then call the ",(0,t.jsx)(e.a,{href:"https://dev.orca.so/legacy/interfaces/Whirlpool.html#closePosition",children:(0,t.jsx)(e.code,{children:"closePosition"})})," instruction to close and burn the position NFT."]}),"\n",(0,t.jsxs)(e.p,{children:["The parameters of ",(0,t.jsx)(e.code,{children:"closePosition"})," are identical to the ones in ",(0,t.jsx)(e.code,{children:"openPosition"}),"."]}),"\n",(0,t.jsx)(e.h2,{id:"whirlpool-client---sample-code",children:"Whirlpool Client - Sample Code"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.a,{href:"https://dev.orca.so/legacy/interfaces/WhirlpoolClient.html",children:(0,t.jsx)(e.code,{children:"WhirlpoolClient"})})," version of ",(0,t.jsx)(e.a,{href:"https://dev.orca.so/legacy/interfaces/Whirlpool.html#closePosition",children:(0,t.jsx)(e.code,{children:"closePosition"})})," will automatically call ",(0,t.jsx)(e.code,{children:"decrease_liquidity"})," and ",(0,t.jsx)(e.code,{children:"close_position"})," for you. Note that you still have to manually call ",(0,t.jsx)(e.code,{children:"collect_fees"})," and ",(0,t.jsx)(e.code,{children:"collect_reward"})," to make sure the position is empty."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"const client = new WhirlpoolClient(context, fetcher);\nconst poolAddress = PDAUtil.getPool(...)\nconst positionAddress = PDAUtil.getPosition(...);\n\nconst pool = client.getPool(poolAddress);\n// Must manually call update_fee_and_rewards -> collect_fees -> collect_rewards\n// Convienience function coming soon.\nconst tx = await pool.closePosition(positionAddress, Percentage.fromFraction(1, 100))\nawait tx.buildAndExecute();\n"})}),"\n",(0,t.jsx)(e.h2,{id:"instruction---sample-code",children:"Instruction - Sample Code"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"const poolAddress = PDAUtil.getPool(...)\nconst positionAddress = PDAUtil.getPosition(...);\nconst position = await fetcher.getPosition(positionAddress);\n// Must manually call decrease_liquidity here\nconst tx = await toTx(ctx, WhirlpoolIx.closePositionTx(ctx, {\n    positionAuthority: ctx.wallet.publicKey,\n    receiver: ctx.wallet.publicKey,\n    positionTokenAccount,\n    position: positionAddress,\n    positionMint: position.positionMint,\n}))\nawait tx.buildAndExecute();\n"})}),"\n",(0,t.jsx)(e.h2,{id:"common-errors",children:"Common Errors"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"ClosePositionNotEmpty"})," (0x1775) - Position still has liquidity in it. Withdraw all before calling this instruction."]}),"\n"]})]})}function h(o={}){const{wrapper:e}={...(0,s.R)(),...o.components};return e?(0,t.jsx)(e,{...o,children:(0,t.jsx)(d,{...o})}):d(o)}}}]);