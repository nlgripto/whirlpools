"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[3057],{95:(e,n,o)=>{o.d(n,{A:()=>y});var t=o(4041),i=o(4357),l=o(5245),s=o(6090),a=o(3190),r=o(838),c=o(6423),d=o(6326);function p(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:o}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:o,attributes:t,default:i}}=e;return{value:n,label:o,attributes:t,default:i}}))}(o);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,o])}function h(e){let{value:n,tabValues:o}=e;return o.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:o}=e;const i=(0,s.W6)(),l=function(e){let{queryString:n=!1,groupId:o}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return o??null}({queryString:n,groupId:o});return[(0,r.aZ)(l),(0,t.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(i.location.search);n.set(l,e),i.replace({...i.location,search:n.toString()})}),[l,i])]}function g(e){const{defaultValue:n,queryString:o=!1,groupId:i}=e,l=u(e),[s,r]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:o}=e;if(0===o.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:o}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${o.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=o.find((e=>e.default))??o[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:l}))),[c,p]=f({queryString:o,groupId:i}),[g,m]=function(e){let{groupId:n}=e;const o=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,l]=(0,d.Dv)(o);return[i,(0,t.useCallback)((e=>{o&&l.set(e)}),[o,l])]}({groupId:i}),v=(()=>{const e=c??g;return h({value:e,tabValues:l})?e:null})();(0,a.A)((()=>{v&&r(v)}),[v]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);r(e),p(e),m(e)}),[p,m,l]),tabValues:l}}var m=o(1310);const v={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};var b=o(1085);function k(e){let{className:n,block:o,selectedValue:t,selectValue:s,tabValues:a}=e;const r=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const n=e.currentTarget,o=r.indexOf(n),i=a[o].value;i!==t&&(c(n),s(i))},p=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const o=r.indexOf(e.currentTarget)+1;n=r[o]??r[0];break}case"ArrowLeft":{const o=r.indexOf(e.currentTarget)-1;n=r[o]??r[r.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":o},n),children:a.map((e=>{let{value:n,label:o,attributes:l}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{r.push(e)},onKeyDown:p,onClick:d,...l,className:(0,i.A)("tabs__item",v.tabItem,l?.className,{"tabs__item--active":t===n}),children:o??n},n)}))})}function w(e){let{lazy:n,children:o,selectedValue:l}=e;const s=(Array.isArray(o)?o:[o]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===l));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function j(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",v.tabList),children:[(0,b.jsx)(k,{...n,...e}),(0,b.jsx)(w,{...n,...e})]})}function y(e){const n=(0,m.A)();return(0,b.jsx)(j,{...e,children:p(e.children)},String(n))}},1184:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(4041);const i={},l=t.createContext(i);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(l.Provider,{value:n},e.children)}},3e3:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Whirlpools SDKs/Whirlpools/Whirlpool Management/Fetch Pools","title":"Fetching Liquidity Pools on Orca","description":"Monitoring and fetching details about liquidity pools on Orca is crucial for understanding their current state, whether you want to gather insights in a Splash Pool, a Concentrated Liquidity Pool, or all pools between specific token pairs. This guide will explain how to interact with the available functions to retrieve these details.","source":"@site/docs/03-Whirlpools SDKs/01-Whirlpools/03-Whirlpool Management/02-Fetch Pools.mdx","sourceDirName":"03-Whirlpools SDKs/01-Whirlpools/03-Whirlpool Management","slug":"/Whirlpools SDKs/Whirlpools/Whirlpool Management/Fetch Pools","permalink":"/Whirlpools SDKs/Whirlpools/Whirlpool Management/Fetch Pools","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/03-Whirlpools SDKs/01-Whirlpools/03-Whirlpool Management/02-Fetch Pools.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Fetch Liquidity Pools"},"sidebar":"sidebar","previous":{"title":"Create Liquidity Pools","permalink":"/Whirlpools SDKs/Whirlpools/Whirlpool Management/Create Pool"},"next":{"title":"Open a position","permalink":"/Whirlpools SDKs/Whirlpools/Position Management/Open Position"}}');var i=o(1085),l=o(1184),s=o(95),a=o(4435);const r={sidebar_label:"Fetch Liquidity Pools"},c="Fetching Liquidity Pools on Orca",d={},p=[{value:"1. Overview of Pool Fetching",id:"1-overview-of-pool-fetching",level:2},{value:"Initialized vs. Uninitialized Pools",id:"initialized-vs-uninitialized-pools",level:3},{value:"2. Getting Started Guide",id:"2-getting-started-guide",level:2},{value:"Fetching a Splash Pool",id:"fetching-a-splash-pool",level:3},{value:"Fetching a Concentrated Liquidity Pool",id:"fetching-a-concentrated-liquidity-pool",level:3},{value:"Fetching Pools by Token Pairs",id:"fetching-pools-by-token-pairs",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"fetching-liquidity-pools-on-orca",children:"Fetching Liquidity Pools on Orca"})}),"\n",(0,i.jsx)(n.p,{children:"Monitoring and fetching details about liquidity pools on Orca is crucial for understanding their current state, whether you want to gather insights in a Splash Pool, a Concentrated Liquidity Pool, or all pools between specific token pairs. This guide will explain how to interact with the available functions to retrieve these details."}),"\n",(0,i.jsx)(n.h2,{id:"1-overview-of-pool-fetching",children:"1. Overview of Pool Fetching"}),"\n",(0,i.jsx)(n.p,{children:"Fetching liquidity pool details helps developers gain insight into the current state of the pool, whether it is initialized or uninitialized, and retrieve relevant metrics like liquidity, price, and fee rates."}),"\n",(0,i.jsx)(n.p,{children:"The SDKs offer three main functions to help developers monitor the pools:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fetch Splash Pool"}),": Fetches the details of a specific Splash Pool."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fetch Concentrated Liquidity Pool"}),": Fetches the details of a specific Concentrated Liquidity Pool."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fetch Pools"}),": Fetches all possible liquidity pools between two token mints, with various tick spacings."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"initialized-vs-uninitialized-pools",children:"Initialized vs. Uninitialized Pools"}),"\n",(0,i.jsxs)(n.p,{children:["Each token pair can have multiple pools based on different tick spacings, corresponding to various fee tiers. When using the Fetch Concentrated Liquidity Pool function, it\u2019s possible to request a pool with a tick spacing that hasn't been used to create a pool for the given token pair. In this case, you\u2019ll receive a pool object with default parameters and an additional field ",(0,i.jsx)(n.code,{children:"initialized = false"}),", indicating that the pool has not been set up."]}),"\n",(0,i.jsx)(n.p,{children:"Similarly, when using Fetch Pools, which iterates through all possible tick spacings for a given token pair, uninitialized pools can also be returned in this manner. The function will return both initialized and uninitialized pools, allowing you to identify pools that have not yet been created."}),"\n",(0,i.jsx)(n.h2,{id:"2-getting-started-guide",children:"2. Getting Started Guide"}),"\n",(0,i.jsx)(n.h3,{id:"fetching-a-splash-pool",children:"Fetching a Splash Pool"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Token Mint Addresses"}),": Provide the mint addresses of the two tokens that make up the liquidity pool."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fetch Pool Details"}),": Use the appropriate function to fetch the details of the specified Splash Pool."]}),"\n"]}),"\n",(0,i.jsxs)(s.A,{groupId:"programming-languages",children:[(0,i.jsx)(a.A,{value:"ts",label:"Typescript",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { fetchSplashPool, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\nconst tokenMintOne = address(\"So11111111111111111111111111111111111111112\");\nconst tokenMintTwo = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\"); //devUSDC\n\nconst poolInfo = await fetchSplashPool(\n  devnetRpc,\n  tokenMintOne,\n  tokenMintTwo\n);\n\nif (poolInfo.initialized) {\n  console.log(\"Pool is initialized:\", poolInfo);\n} else {\n  console.log(\"Pool is not initialized:\", poolInfo);\n};\n"})})}),(0,i.jsx)(a.A,{value:"rust",label:"Rust",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_splash_pool, set_whirlpools_config_address, PoolInfo, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let token_a = Pubkey::from_str("So11111111111111111111111111111111111111112").unwrap();\n    let token_b = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap(); // devUSDC\n\n    let pool_info = fetch_splash_pool(&rpc, token_a, token_b).await.unwrap();\n\n    match pool_info {\n        PoolInfo::Initialized(pool) => println!("Pool is initialized: {:?}", pool),\n        PoolInfo::Uninitialized(pool) => println!("Pool is not initialized: {:?}", pool),\n    }\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"fetching-a-concentrated-liquidity-pool",children:"Fetching a Concentrated Liquidity Pool"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Token Mint Addresses"}),": Provide the mint addresses of the two tokens that make up the liquidity pool."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tick Spacing"}),": Specify the tick spacing, which defines the intervals for price ticks."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fetch Pool Details"}),": Use the appropriate function to fetch the details of the specified Concentrated Liquidity Pool."]}),"\n"]}),"\n",(0,i.jsxs)(s.A,{groupId:"programming-languages",children:[(0,i.jsx)(a.A,{value:"ts",label:"Typescript",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:" import { fetchConcentratedLiquidityPool, setWhirlpoolsConfig } from '@orca-so/whirlpools';\n import { createSolanaRpc, devnet, address } from '@solana/kit';\n\n await setWhirlpoolsConfig('solanaDevnet');\n const devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\n\n const tokenMintOne = address(\"So11111111111111111111111111111111111111112\");\n const tokenMintTwo = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\");\n const tickSpacing = 64;\n\n const poolInfo = await fetchConcentratedLiquidityPool(\n   devnetRpc,\n   tokenMintOne,\n   tokenMintTwo,\n   tickSpacing\n );\n\n if (poolInfo.initialized) {\n   console.log(\"Pool is initialized:\", poolInfo);\n } else {\n   console.log(\"Pool is not initialized:\", poolInfo);\n };\n"})})}),(0,i.jsx)(a.A,{value:"rust",label:"Rust",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_concentrated_liquidity_pool, set_whirlpools_config_address, PoolInfo, WhirlpoolsConfigInput\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let token_a = Pubkey::from_str("So11111111111111111111111111111111111111112").unwrap();\n    let token_b = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap(); // devUSDC\n    let tick_spacing = 64;\n\n    let pool_info = fetch_concentrated_liquidity_pool(&rpc, token_a, token_b, tick_spacing).await.unwrap();\n\n    match pool_info {\n        PoolInfo::Initialized(pool) => println!("Pool is initialized: {:?}", pool),\n        PoolInfo::Uninitialized(pool) => println!("Pool is not initialized: {:?}", pool),\n    }\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"fetching-pools-by-token-pairs",children:"Fetching Pools by Token Pairs"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Token Mint Addresses"}),": Provide the mint addresses of the two tokens that make up the liquidity pool."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fetch Pool Details"}),": Use the appropriate function to fetch the details of the specified pools."]}),"\n"]}),"\n",(0,i.jsxs)(s.A,{groupId:"programming-languages",children:[(0,i.jsx)(a.A,{value:"ts",label:"Typescript",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { fetchWhirlpoolsByTokenPair, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\n\nconst tokenMintOne = address(\"So11111111111111111111111111111111111111112\");\nconst tokenMintTwo = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\");\n\nconst poolInfos = await fetchWhirlpoolsByTokenPair(\n  devnetRpc,\n  tokenMintOne,\n  tokenMintTwo\n);\n\npoolInfos.forEach((poolInfo) => {\n  if (poolInfo.initialized) {\n    console.log(\"Pool is initialized:\", poolInfo);\n  } else {\n    console.log(\"Pool is not initialized:\", poolInfo);\n  }\n});\n"})})}),(0,i.jsx)(a.A,{value:"rust",label:"Rust",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_whirlpools_by_token_pair, set_whirlpools_config_address, PoolInfo, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let token_a = Pubkey::from_str("So11111111111111111111111111111111111111112").unwrap();\n    let token_b = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap(); // devUSDC\n\n    let pool_infos = fetch_whirlpools_by_token_pair(&rpc, token_a, token_b)\n        .await\n        .unwrap();\n\n    for pool_info in pool_infos {\n        match pool_info {\n            PoolInfo::Initialized(pool) => println!("Pool is initialized: {:?}", pool),\n            PoolInfo::Uninitialized(pool) => println!("Pool is not initialized: {:?}", pool),\n        }\n    }\n}\n'})})})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},4435:(e,n,o)=>{o.d(n,{A:()=>s});o(4041);var t=o(4357);const i={tabItem:"tabItem_OMyP"};var l=o(1085);function s(e){let{children:n,hidden:o,className:s}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,s),hidden:o,children:n})}}}]);