"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[2327],{95:(e,n,t)=>{t.d(n,{A:()=>j});var i=t(4041),o=t(4357),s=t(5245),r=t(6090),a=t(3190),l=t(838),c=t(6423),d=t(6326);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:o}}=e;return{value:n,label:t,attributes:i,default:o}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const o=(0,r.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(o.location.search);n.set(s,e),o.replace({...o.location,search:n.toString()})}),[s,o])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,s=h(e),[r,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[c,u]=f({queryString:t,groupId:o}),[g,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,s]=(0,d.Dv)(t);return[o,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:o}),v=(()=>{const e=c??g;return p({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{v&&l(v)}),[v]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),m(e)}),[u,m,s]),tabValues:s}}var m=t(1310);const v={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};var b=t(1085);function w(e){let{className:n,block:t,selectedValue:i,selectValue:r,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),o=a[t].value;o!==i&&(c(n),r(o))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...s,className:(0,o.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:s}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function y(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,o.A)("tabs-container",v.tabList),children:[(0,b.jsx)(w,{...n,...e}),(0,b.jsx)(x,{...n,...e})]})}function j(e){const n=(0,m.A)();return(0,b.jsx)(y,{...e,children:u(e.children)},String(n))}},1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(4041);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},4320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"Whirlpools SDKs/Whirlpools/Position Management/Fetch Positions","title":"Fetching Positions","description":"Retrieving details about positions held in liquidity pools is an essential part of managing your liquidity and monitoring performance. This guide explains how to use the SDK to gather information about all active positions held by a given wallet.","source":"@site/docs/03-Whirlpools SDKs/01-Whirlpools/04-Position Management/02-Fetch Positions.mdx","sourceDirName":"03-Whirlpools SDKs/01-Whirlpools/04-Position Management","slug":"/Whirlpools SDKs/Whirlpools/Position Management/Fetch Positions","permalink":"/Whirlpools SDKs/Whirlpools/Position Management/Fetch Positions","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/03-Whirlpools SDKs/01-Whirlpools/04-Position Management/02-Fetch Positions.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Fetch Positions"},"sidebar":"sidebar","previous":{"title":"Open a position","permalink":"/Whirlpools SDKs/Whirlpools/Position Management/Open Position"},"next":{"title":"Adjust Liquidity","permalink":"/Whirlpools SDKs/Whirlpools/Position Management/Adjust Liquidity"}}');var o=t(1085),s=t(1184),r=t(95),a=t(4435);const l={sidebar_label:"Fetch Positions"},c="Fetching Positions",d={},u=[{value:"1. Overview of Fetching Positions",id:"1-overview-of-fetching-positions",level:2},{value:"2. Getting Started Guide",id:"2-getting-started-guide",level:2},{value:"Fetching Positions for a Wallet",id:"fetching-positions-for-a-wallet",level:3},{value:"Fetching Positions in a Whirlpool",id:"fetching-positions-in-a-whirlpool",level:3},{value:"3. Usage example",id:"3-usage-example",level:2},{value:"4. Next steps",id:"4-next-steps",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"fetching-positions",children:"Fetching Positions"})}),"\n",(0,o.jsx)(n.p,{children:"Retrieving details about positions held in liquidity pools is an essential part of managing your liquidity and monitoring performance. This guide explains how to use the SDK to gather information about all active positions held by a given wallet."}),"\n",(0,o.jsx)(n.h2,{id:"1-overview-of-fetching-positions",children:"1. Overview of Fetching Positions"}),"\n",(0,o.jsx)(n.p,{children:"Fetching positions helps developers retrieve information on liquidity positions associated with a specific wallet. It scans the Solana blockchain for token accounts owned by the wallet, determines which ones represent positions, and decodes the data to provide detailed information about each position."}),"\n",(0,o.jsx)(n.p,{children:"With this function, you can:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Identify all liquidity positions held by a wallet."}),"\n",(0,o.jsx)(n.li,{children:"Gather information about liquidity, price ranges, and fees earned."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"2-getting-started-guide",children:"2. Getting Started Guide"}),"\n",(0,o.jsx)(n.h3,{id:"fetching-positions-for-a-wallet",children:"Fetching Positions for a Wallet"}),"\n",(0,o.jsx)(n.p,{children:"Fetching positions is a straightforward process:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RPC Client"}),": Use a Solana RPC client to interact with the blockchain."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Wallet Address"}),": Provide the wallet address of the user whose positions you want to fetch."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Fetch Positions"}),": Use the appropriate function to retrieve all positions held by the specified wallet."]}),"\n"]}),"\n",(0,o.jsxs)(r.A,{groupId:"programming-languages",children:[(0,o.jsx)(a.A,{value:"ts",label:"Typescript",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { fetchPositionsForOwner, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\nconst owner = address(\"3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt\"); // set an owner address\n\nconst positions = await fetchPositionsForOwner(devnetRpc, owner);\n\nconsole.log(positions);\n"})})}),(0,o.jsx)(a.A,{value:"rust",label:"Rust",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_positions_for_owner, set_whirlpools_config_address, WhirlpoolsConfigInput\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let whirlpool_address =\n        Pubkey::from_str("3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt").unwrap();\n\n    let positions = fetch_positions_for_owner(&rpc, whirlpool_address)\n        .await\n        .unwrap();\n\n    println!("Positions: {:?}", positions);\n}\n'})})})]}),"\n",(0,o.jsx)(n.h3,{id:"fetching-positions-in-a-whirlpool",children:"Fetching Positions in a Whirlpool"}),"\n",(0,o.jsx)(n.p,{children:"Fetching all positions in a Whirlpool is a straightforward process:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RPC Client"}),": Use a Solana RPC client to interact with the blockchain."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Whirlpool Address"}),": Provide the whirlpool address for the positions you want to fetch."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Fetch Positions"}),": Use the appropriate function to retrieve all positions in a whirlpool."]}),"\n"]}),"\n",(0,o.jsxs)(r.A,{groupId:"programming-languages",children:[(0,o.jsx)(a.A,{value:"ts",label:"Typescript",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { fetchPositionsInWhirlpool, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\nconst owner = address(\"3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt\");\n\nconst positions = await fetchPositionsInWhirlpool(devnetRpc, owner);\n\nconsole.log(positions);\n"})})}),(0,o.jsx)(a.A,{value:"rust",label:"Rust",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_positions_in_whirlpool, set_whirlpools_config_address, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let whirlpool_address =\n        Pubkey::from_str("3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt").unwrap();\n\n    let positions = fetch_positions_in_whirlpool(&rpc, whirlpool_address)\n        .await\n        .unwrap();\n\n    println!("Positions: {:?}", positions);\n}\n'})})})]}),"\n",(0,o.jsx)(n.h2,{id:"3-usage-example",children:"3. Usage example"}),"\n",(0,o.jsx)(n.p,{children:"Suppose you want to monitor all active positions held by a wallet. By using the SDK to fetch positions, you can retrieve detailed information about each position, including liquidity amounts, associated pools, and earned rewards. This data can also be used to build a bot that rebalances or repositions liquidity according to a strategy defined by an algorithmic trader. Monitoring position performance helps in making informed decisions about adjusting, rebalancing, or closing positions."}),"\n",(0,o.jsx)(n.h2,{id:"4-next-steps",children:"4. Next steps"}),"\n",(0,o.jsx)(n.p,{children:"After fetching positions, you could:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/Whirlpools%20SDKs/Whirlpools/Position%20Management/Adjust%20Liquidity",children:"Add or Remove Liquidity"}),": Adjust the amount of liquidity in your position based on market conditions."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/Whirlpools%20SDKs/Whirlpools/Position%20Management/Harvest",children:"Harvest Rewards"}),": Collect rewards and fees without closing the position."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/Whirlpools%20SDKs/Whirlpools/Position%20Management/Close%20Position",children:"Close Position"}),": When you decide to exit, close the position and withdraw the provided tokens along with any earned fees."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"By fetching the positions, you gain visibility into your liquidity positions and can take necessary actions to optimize returns."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},4435:(e,n,t)=>{t.d(n,{A:()=>r});t(4041);var i=t(4357);const o={tabItem:"tabItem_OMyP"};var s=t(1085);function r(e){let{children:n,hidden:t,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(o.tabItem,r),hidden:t,children:n})}}}]);