"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[26],{1184:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>a});var n=o(4041);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}},3307:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Legacy SDK/Position Management/Collect Fees and Rewards","title":"Collect Fees and Rewards","description":"As the liquidity pool is traded upon, liquidity providers will begin to accrue fees and rewards. Follow the following steps to see how much you are owe and how to collect them.","source":"@site/docs/04-Legacy SDK/03-Position Management/04-Collect Fees and Rewards.md","sourceDirName":"04-Legacy SDK/03-Position Management","slug":"/Legacy SDK/Position Management/Collect Fees and Rewards","permalink":"/Legacy SDK/Position Management/Collect Fees and Rewards","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/04-Legacy SDK/03-Position Management/04-Collect Fees and Rewards.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Closing a Position","permalink":"/Legacy SDK/Position Management/Closing a Position"},"next":{"title":"Identifying Wallet Positions","permalink":"/Legacy SDK/Position Management/Identifying Wallet Positions"}}');var i=o(1085),r=o(1184);const s={},a="Collect Fees and Rewards",c={},l=[{value:"Get a quick quote on outstanding fees and rewards",id:"get-a-quick-quote-on-outstanding-fees-and-rewards",level:2},{value:"Update on-chain position with the latest accrued fees",id:"update-on-chain-position-with-the-latest-accrued-fees",level:2},{value:"Collect Fees and Rewards",id:"collect-fees-and-rewards-1",level:2},{value:"Collect fee",id:"collect-fee",level:3},{value:"Collect rewards",id:"collect-rewards",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"collect-fees-and-rewards",children:"Collect Fees and Rewards"})}),"\n",(0,i.jsx)(t.p,{children:"As the liquidity pool is traded upon, liquidity providers will begin to accrue fees and rewards. Follow the following steps to see how much you are owe and how to collect them."}),"\n",(0,i.jsx)(t.h2,{id:"get-a-quick-quote-on-outstanding-fees-and-rewards",children:"Get a quick quote on outstanding fees and rewards"}),"\n",(0,i.jsxs)(t.p,{children:["There are use-cases where users would like to check the outstanding values before deciding to perform an on-chain update and harvest. In these cases, use the provided ",(0,i.jsx)(t.code,{children:"collectFeesQuote"})," and ",(0,i.jsx)(t.code,{children:"collectRewardsQuote"})," in the Typescript SDK."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// Fetching necessary on-chain account data.\nconst whirlpool = await fetcher.getPool(whirlpoolAddress);\nconst position = await fetcher.getPosition(positionAddress)\n// Fetching tick array. Note that you may have to fetch two of them\n// if the upper and lower ticks live on different tick arrays.\nconst tickArrayAddress = TickUtil.getPdaWithTickIndex(tickLowerIndex, ...);\nconst tickArray = await fetcher.getTickArray(tickArrayAddress);\n\n// Get the individual TickData on each tickIndex from the fetched TickArray\nconst lowerTick = TickUtil.getTickFromTickArrayData(tickArrayData, tickLowerIndex, tickSpacing);\nconst upperTick = TickUtil.getTickFromTickArrayData(tickArrayData, tickUpperIndex, tickSpacing);\n\nconst feeQuote = collectFeesQuote({\n  whirlpool,\n  position,\n  tickLower: lowerTick,\n  tickUpper: upperTick,\n});\n\nconst feesInTokenA = feeQuote.feeOwedA;\nconst feesInTokenB = feeQuote.feeOwedB;\n\nconst rewardQuote = collectRewardsQuote({\n  whirlpool,\n  position,\n  tickLower: lowerTick,\n  tickUpper: upperTick,\n});\n\nconst rewardsInReward0 = rewardQuote[0].toNumber();\nconst rewardsInReward1 = rewardQuote[1].toNumber();\nconst rewardsInReward2 = rewardQuote[2].toNumber();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"update-on-chain-position-with-the-latest-accrued-fees",children:"Update on-chain position with the latest accrued fees"}),"\n",(0,i.jsxs)(t.p,{children:["Before you fetch your owed fees, you must update the on-chain position with the latest values by calling ",(0,i.jsx)(t.code,{children:"increase_liquidity"})," or ",(0,i.jsx)(t.code,{children:"decrease_liquidity"}),". Alternatively, you can call ",(0,i.jsx)(t.code,{children:"update_fee_and_rewards"})," to update without modifying liquidity."]}),"\n",(0,i.jsx)(t.p,{children:"If this step is skipped, the collect instructions will only fetch the last updated values of the position. In many cases, this will be 0."}),"\n",(0,i.jsxs)(t.p,{children:["Sample code on using ",(0,i.jsx)(t.code,{children:"update_fee_and_rewards"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"const whirlpool = await fetcher.getPool(whirlpoolAddress);\nconst position = await fetcher.getPosition(positionAddress);\nconst tickArrayLower = getTickArrayPda(ctx.program.programId, whirlpoolAddress, position.tickLowerIndex);\nconst tickArrayUpper = getTickArrayPda(ctx.program.programId, whirlpoolAddress, position.tickUpperIndex);\nawait toTx(ctx, WhirlpoolIx.updateFeesAndRewardsIx(ctx.program, {\n    whirlpool: position.whirlpool,\n    position: positionAddress,\n    tickArrayLower,\n    tickArrayUpper,\n})).buildAndExecute();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"collect-fees-and-rewards-1",children:"Collect Fees and Rewards"}),"\n",(0,i.jsxs)(t.p,{children:["Once the position has been updated, you can use ",(0,i.jsx)(t.code,{children:"collect_fees"})," and ",(0,i.jsx)(t.code,{children:"collect_reward"})," to harvest the position."]}),"\n",(0,i.jsx)(t.h3,{id:"collect-fee",children:"Collect fee"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"const whirlpool = await fetcher.getPool(whirlpoolAddress);\nconst position = await fetcher.getPosition(positionAddress);\n\nconst positionTokenAccount = await deriveATA(provider.wallet.publicKey, position.positionMint);\nconst tokenOwnerAccountA = await deriveATA(provider.wallet.publicKey, whirlpool.tokenMintA);\nconst tokenOwnerAccountB = await deriveATA(provider.wallet.publicKey, whirlpool.tokenMintB);\n\nawait toTx(ctx, WhirlpoolIx.collectFeesIx(ctx.program, {\n  whirlpool: whirlpoolAddress,\n  positionAuthority: provider.wallet.publicKey,\n  position: positionAddress,\n  positionTokenAccount,\n  tokenOwnerAccountA,\n  tokenOwnerAccountB,\n  tokenVaultA: whirlpool.tokenVaultA,\n  tokenVaultB: whirlpool.tokenVaultB\n})).buildAndExecute();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"collect-rewards",children:"Collect rewards"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// Fetching rewards at reward index 0\nconst whirlpool = await fetcher.getPool(whirlpoolAddress);\nconst position = await fetcher.getPosition(positionAddress);\n\nconst rewardTokenMint = whirlpool.rewardInfos[0].mint;\nconst rewardOwnerAccount = await deriveATA(provider.wallet.publicKey, rewardTokenMint);\nconst positionTokenAccount = await deriveATA(provider.wallet.publicKey, position.positionMint);\n\nawait toTx(ctx, WhirlpoolIx.collectRewardIx(ctx.program, {\n  whirlpool: whirlpoolAddress,\n  positionAuthority: provider.wallet.publicKey,\n  position: positionAddress,\n  positionTokenAccount,\n  rewardOwnerAccount: rewardOwnerAccount,\n  rewardVault: whirlpool.rewardInfo[0].vault,\n  rewardIndex: 0,\n})).buildAndExecute();\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);