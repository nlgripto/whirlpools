"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[9366],{95:(e,t,n)=>{n.d(t,{A:()=>j});var o=n(4041),a=n(4357),r=n(5245),s=n(6090),i=n(3190),l=n(838),u=n(6423),c=n(6326);function d(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}(n);return function(e){const t=(0,u.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=p(e),[s,l]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:r}))),[u,d]=m({queryString:n,groupId:a}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Dv)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),w=(()=>{const e=u??f;return h({value:e,tabValues:r})?e:null})();(0,i.A)((()=>{w&&l(w)}),[w]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),g(e)}),[d,g,r]),tabValues:r}}var g=n(1310);const w={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};var x=n(1085);function b(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,r.a_)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),a=i[n].value;a!==o&&(u(t),s(a))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...r,className:(0,a.A)("tabs__item",w.tabItem,r?.className,{"tabs__item--active":o===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,o.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function k(e){const t=f(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",w.tabList),children:[(0,x.jsx)(b,{...t,...e}),(0,x.jsx)(v,{...t,...e})]})}function j(e){const t=(0,g.A)();return(0,x.jsx)(k,{...e,children:d(e.children)},String(t))}},1184:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(4041);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}},4435:(e,t,n)=>{n.d(t,{A:()=>s});n(4041);var o=n(4357);const a={tabItem:"tabItem_OMyP"};var r=n(1085);function s(e){let{children:t,hidden:n,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.A)(a.tabItem,s),hidden:n,children:t})}},9095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Whirlpools SDKs/Whirlpools/Trade","title":"Executing a Token Swap","description":"You can use the SDK to execute a token swap on Orca. Whether you\'re swapping a specific amount of input tokens or looking to receive a precise amount of output tokens, this function handles the preparation of token accounts, liquidity data, and instruction assembly. It also manages slippage tolerance to ensure that swaps are executed within acceptable price changes.","source":"@site/docs/03-Whirlpools SDKs/01-Whirlpools/05-Trade.mdx","sourceDirName":"03-Whirlpools SDKs/01-Whirlpools","slug":"/Whirlpools SDKs/Whirlpools/Trade","permalink":"/Whirlpools SDKs/Whirlpools/Trade","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/03-Whirlpools SDKs/01-Whirlpools/05-Trade.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_label":"Trade"},"sidebar":"sidebar","previous":{"title":"Close Position","permalink":"/Whirlpools SDKs/Whirlpools/Position Management/Close Position"},"next":{"title":"Send Transactions","permalink":"/Whirlpools SDKs/Whirlpools/Send Transaction"}}');var a=n(1085),r=n(1184),s=n(95),i=n(4435);const l={sidebar_label:"Trade"},u="Executing a Token Swap",c={},d=[{value:"1. Overview of Executing a Token Swap",id:"1-overview-of-executing-a-token-swap",level:2},{value:"2. Getting Started Guide",id:"2-getting-started-guide",level:2},{value:"Executing a Token Swap",id:"executing-a-token-swap-1",level:3},{value:"3. Example Usage",id:"3-example-usage",level:3}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"executing-a-token-swap",children:"Executing a Token Swap"})}),"\n",(0,a.jsx)(t.p,{children:"You can use the SDK to execute a token swap on Orca. Whether you're swapping a specific amount of input tokens or looking to receive a precise amount of output tokens, this function handles the preparation of token accounts, liquidity data, and instruction assembly. It also manages slippage tolerance to ensure that swaps are executed within acceptable price changes."}),"\n",(0,a.jsx)(t.p,{children:"This guide explains how to use the SDK to perform a token swap in an Orca Whirlpool."}),"\n",(0,a.jsx)(t.h2,{id:"1-overview-of-executing-a-token-swap",children:"1. Overview of Executing a Token Swap"}),"\n",(0,a.jsx)(t.p,{children:"The SDK allows you to swap tokens between different pools on Orca. It handles the calculation of token amounts, manages slippage, and assembles the necessary instructions for executing the swap."}),"\n",(0,a.jsx)(t.p,{children:"With this function, you can:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Swap an exact amount of input tokens for the maximum possible output."}),"\n",(0,a.jsx)(t.li,{children:"Specify the desired amount of output tokens and determine the necessary input."}),"\n",(0,a.jsx)(t.li,{children:"Control slippage to manage your risk during volatile market conditions."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"2-getting-started-guide",children:"2. Getting Started Guide"}),"\n",(0,a.jsx)(t.p,{children:"Before creating a Splash Pool or a Concentrated Liquidity Pool, ensure you have completed the environment setup:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"RPC Setup"}),": Use a Solana RPC client to communicate with the blockchain."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Wallet Creation"}),": Create a wallet to interact with the Solana network."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Devnet Airdrop"}),": Fund your wallet with a Solana devnet airdrop to cover transaction fees."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["For more details, refer to our ",(0,a.jsx)(t.a,{href:"/Whirlpools%20SDKs/Whirlpools/Environment%20Setup",children:"Environment Setup Guide"})]}),"\n",(0,a.jsx)(t.h3,{id:"executing-a-token-swap-1",children:"Executing a Token Swap"}),"\n",(0,a.jsx)(t.p,{children:"To execute a token swap in an Orca Whirlpool, follow these steps:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"RPC Client"}),": Use a Solana RPC client to interact with the blockchain."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Pool Address"}),": Provide the address of the Orca Whirlpool pool where the swap will take place."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Swap Parameters"}),": Define the swap parameters. You only need to provide one of these parameters, and the function will compute the others in the returned quote based on the current price of the pool:"]}),"\n"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"inputAmount"}),": Specify the amount of tokens to swap (if exact input)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"outputAmount"}),": Specify the desired amount of tokens to receive (if exact output)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"mint"}),": Provide the mint address of the token you want to swap out."]}),"\n"]}),"\n",(0,a.jsxs)(t.ol,{start:"4",children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Slippage tolerance"}),": Set the maximum slippage tolerance (optional, defaults to 1%). Slippage refers to the difference between the expected amounts of tokens received or sent during the swap and the actual amounts executed. A lower slippage tolerance reduces the risk of receiving fewer tokens than expected, but may lead to failed transactions if the market moves too quickly. For example, if you expect to receive 1,000 units of Token B for 100 units of Token A, with a 1% slippage tolerance, the maximum Token A spent will be 101, and the minimum Token B received will be 990."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Signer"}),": This can be your wallet, which will fund the pool initialization. If a signer is not specified, the default wallet will be used. You can configure the default wallet through the SDK."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Create Instructions"}),": Use the appropriate function to generate the necessary instructions for the swap."]}),"\n"]}),"\n",(0,a.jsxs)(s.A,{groupId:"programming-languages",children:[(0,a.jsx)(i.A,{value:"ts",label:"Typescript",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"import { setWhirlpoolsConfig, swapInstructions } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\nimport { loadWallet } from './utils';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\nconst wallet = await loadWallet();\nconst whirlpoolAddress = address(\"3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt\");\nconst mintAddress = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\");\nconst inputAmount = 1_000_000n;\n\nconst { instructions, quote } = await swapInstructions(\n  devnetRpc,\n  { inputAmount, mint: mintAddress },\n  whirlpoolAddress,\n  100,\n  wallet\n);\n\nconsole.log(`Quote estimated token out: ${quote.tokenEstOut}`);\nconsole.log(`Number of instructions:, ${instructions.length}`);\n"})})}),(0,a.jsx)(i.A,{value:"rust",label:"Rust",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'use crate::utils::load_wallet;\nuse orca_whirlpools::{\n    set_whirlpools_config_address, swap_instructions, SwapType, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let wallet = load_wallet();\n    let whirlpool_address =\n        Pubkey::from_str("3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt").unwrap();\n    let mint_address = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap();\n    let input_amount = 1_000_000;\n\n    let result = swap_instructions(\n        &rpc,\n        whirlpool_address,\n        input_amount,\n        mint_address,\n        SwapType::ExactIn,\n        Some(100),\n        Some(wallet.pubkey()),\n    )\n    .await\n    .unwrap();\n\n    println!("Quote estimated token out: {:?}", result.quote);\n    println!("Number of Instructions: {}", result.instructions.len());\n}\n'})})})]}),"\n",(0,a.jsxs)(t.ol,{start:"7",children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Submit Transaction"}),": Include the generated instructions in a Solana transaction and send it to the network using the Solana SDK."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"3-example-usage",children:"3. Example Usage"}),"\n",(0,a.jsx)(t.p,{children:"Suppose you are developing an arbitrage bot that looks for price discrepancies between different liquidity pools on Orca. By using the SDK, the bot can retrieve the quote object for a potential swap, which includes details about the token amounts and expected output. The bot can quickly compare quotes from multiple pools to identify arbitrage opportunities and execute profitable swaps."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);