"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[8961],{1184:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>a});var o=t(4041);const n={},s=o.createContext(n);function r(e){const i=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(s.Provider,{value:i},e.children)}},1919:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Legacy SDK/Position Management/Modify Liquidity","title":"Modify Liquidity","description":"Whirlpools provide two instructions - increaseliquidity and decreaseliquidity to allow users to modify their position\'s liquidity.","source":"@site/docs/04-Legacy SDK/03-Position Management/02-Modify Liquidity.md","sourceDirName":"04-Legacy SDK/03-Position Management","slug":"/Legacy SDK/Position Management/Modify Liquidity","permalink":"/Legacy SDK/Position Management/Modify Liquidity","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/04-Legacy SDK/03-Position Management/02-Modify Liquidity.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Opening a Position","permalink":"/Legacy SDK/Position Management/Opening a Position"},"next":{"title":"Closing a Position","permalink":"/Legacy SDK/Position Management/Closing a Position"}}');var n=t(1085),s=t(1184);const r={},a="Modify Liquidity",l={},c=[{value:"Using Whirlpool Client",id:"using-whirlpool-client",level:2},{value:"The Manual Way",id:"the-manual-way",level:2},{value:"Getting a Quote",id:"getting-a-quote",level:2},{value:"Increase liquidity quote by input token amount",id:"increase-liquidity-quote-by-input-token-amount",level:3},{value:"Decrease liquidity quote by input token amount",id:"decrease-liquidity-quote-by-input-token-amount",level:3},{value:"Other Parameters",id:"other-parameters",level:3},{value:"Sample Code",id:"sample-code",level:2},{value:"Increase liquidity example",id:"increase-liquidity-example",level:3},{value:"Decrease liquidity example",id:"decrease-liquidity-example",level:3},{value:"Common Errors",id:"common-errors",level:2}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"modify-liquidity",children:"Modify Liquidity"})}),"\n",(0,n.jsxs)(i.p,{children:["Whirlpools provide two instructions - ",(0,n.jsx)(i.a,{href:"https://github.com/orca-so/whirlpools/blob/a988854b3c63499835b4be3bda552182842a8aa1/programs/whirlpool/src/lib.rs#L211",children:(0,n.jsx)(i.code,{children:"increase_liquidity"})})," and ",(0,n.jsx)(i.a,{href:"https://github.com/orca-so/whirlpools/blob/a988854b3c63499835b4be3bda552182842a8aa1/programs/whirlpool/src/lib.rs#L234",children:(0,n.jsx)(i.code,{children:"decrease_liquidity"})})," to allow users to modify their position's liquidity."]}),"\n",(0,n.jsxs)(i.p,{children:["The SDK also provides quote functions (ex. ",(0,n.jsx)(i.a,{href:"https://dev.orca.so/legacy/functions/increaseLiquidityQuoteByInputToken.html",children:(0,n.jsx)(i.code,{children:"increaseLiquidityQuoteByInputToken"})}),", ",(0,n.jsx)(i.a,{href:"https://dev.orca.so/legacy/functions/decreaseLiquidityQuoteByLiquidity.html",children:(0,n.jsx)(i.code,{children:"decreaseLiquidityQuoteByLiquidity"})}),") to help estimate the tokenIn/Out from the liquidity operation."]}),"\n",(0,n.jsx)(i.h2,{id:"using-whirlpool-client",children:"Using Whirlpool Client"}),"\n",(0,n.jsxs)(i.p,{children:["Use the ",(0,n.jsx)(i.a,{href:"https://dev.orca.so/legacy/interfaces/Position.html",children:(0,n.jsx)(i.code,{children:"Position"})})," class from the ",(0,n.jsx)(i.a,{href:"https://dev.orca.so/legacy/interfaces/WhirlpoolClient.html",children:(0,n.jsx)(i.code,{children:"WhirlpoolClient"})})," to fetch and manage your liquidity. Read below for more on the relationship between quote and the transaction."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-tsx",children:"const position = await client.getPosition(positionAddress);\nconst preIncreaseData = position.getData();\nconst increase_quote = increaseLiquidityQuoteByInputToken(\n  poolInitInfo.tokenMintB,\n  new Decimal(70),\n  lowerTick,\n  upperTick,\n  Percentage.fromFraction(1, 100),\n  pool\n);\n\nawait (\n  await position.increaseLiquidity(increase_quote, ctx.wallet.publicKey, ctx.wallet.publicKey)\n).buildAndExecute();\n"})}),"\n",(0,n.jsx)(i.h2,{id:"the-manual-way",children:"The Manual Way"}),"\n",(0,n.jsx)(i.p,{children:"For each instruction, calculate the following values:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"liquidityAmount"})," - The total amount of liquidity you would like to deposit/withdraw into your position."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"tokenMax A, B (increase_liquidity)"})," - The maximum amount of token X to add to the position. Note the value here is shifted by the decimal places of the token."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"tokenMin A, B (decrease_liquidity)"})," - The minimum amount of token X to withdraw from the position. Note the value here is shifted by the decimal places of the token."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"getting-a-quote",children:"Getting a Quote"}),"\n",(0,n.jsx)(i.p,{children:"The Typescript SDK provides several quote functions to help generate an estimate based on common user input values."}),"\n",(0,n.jsx)(i.h3,{id:"increase-liquidity-quote-by-input-token-amount",children:"Increase liquidity quote by input token amount"}),"\n",(0,n.jsxs)(i.p,{children:["Given a desired amount of input token (A or B), you can use the quote utility function ",(0,n.jsx)(i.a,{href:"https://dev.orca.so/legacy/functions/increaseLiquidityQuoteByInputTokenWithParams.html",children:(0,n.jsx)(i.code,{children:"increaseLiquidityQuoteByInputTokenWithParams"})})," to calculate the liquidityAmount and other tokenMax value required to deposit the desired amount of token into the position."]}),"\n",(0,n.jsxs)(i.p,{children:["The quote amount will differ based on the current price (tick) and the desired tick boundaries for the position. The price environment may change from the time of quote to the actual processing of the ",(0,n.jsx)(i.a,{href:"https://github.com/orca-so/whirlpools/blob/a988854b3c63499835b4be3bda552182842a8aa1/programs/whirlpool/src/lib.rs#L211",children:(0,n.jsx)(i.code,{children:"increase_liquidity"})})," ix. Use the slippage tolerance to adjust the quote values to balance your risk of ix failure and total tokens to deposit."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-tsx",children:"const whirlpool = await fetcher.getPool(...);\nconst position = await fetcher.getPosition(...);\n// 10 tokens of a token with 6 decimals\nconst depositTokenBAmount = new BN(10_000_000);\n\nconst quote = await increaseLiquidityQuoteByInputTokenWithParams({\n  tokenMintA: whirlpool.tokenMintA,\n  tokenMintB: whirlpool.tokenMintB,\n  tickCurrentIndex: whirlpool.tickCurrentIndex,\n  sqrtPrice: whirlpool.sqrtPrice,\n  inputTokenMint: whirlpool.tokenMintB,\n  inputTokenAmount: desiredTokenBAmount,\n  tickLowerIndex: position.tickLowerIndex,\n  tickUpperIndex: position.tickUpperIndex,\n  slippageTolerance: Percentage.fromFraction(1, 1000),\n});\n"})}),"\n",(0,n.jsx)(i.h3,{id:"decrease-liquidity-quote-by-input-token-amount",children:"Decrease liquidity quote by input token amount"}),"\n",(0,n.jsxs)(i.p,{children:["Given the liquidity amount, use the ",(0,n.jsx)(i.a,{href:"https://dev.orca.so/legacy/functions/decreaseLiquidityQuoteByLiquidityWithParams.html",children:(0,n.jsx)(i.code,{children:"decreaseLiquidityQuoteByLiquidityWithParams"})})," util function to get an estimate on what's the minimum token A & B you can expect from the ",(0,n.jsx)(i.a,{href:"https://github.com/orca-so/whirlpools/blob/a988854b3c63499835b4be3bda552182842a8aa1/programs/whirlpool/src/lib.rs#L234",children:(0,n.jsx)(i.code,{children:"decrease_liquidity"})})," instruction call."]}),"\n",(0,n.jsxs)(i.p,{children:["Like ",(0,n.jsx)(i.a,{href:"https://github.com/orca-so/whirlpools/blob/a988854b3c63499835b4be3bda552182842a8aa1/programs/whirlpool/src/lib.rs#L211",children:(0,n.jsx)(i.code,{children:"increase_liquidity"})}),", use the slippage tolerance to adjust the quote values to balance your risk of ix failure and total tokens to deposit."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-tsx",children:"const whirlpool = await fetcher.getPool(whirlpoolAddress);\nconst position = await fetcher.getPosition(positionAddress);\n\n// Example: Withdraw 30% of the position\nconst totalLiquidityInPosition = position.liquidity;\nconst withdrawLiquidityAmount = totalLiquidityInPosition.mul(new BN(30).div(new BN(100)));\nconst depositQuote = decreaseLiquidityQuoteByLiquidityWithParams({\n    withdrawLiquidityAmount,\n    sqrtPrice: whirlpool.sqrtPrice,\n    tickCurrentIndex: whirpool.tickCurrentIndex,\n    tickLowerIndex: position.tickLowerIndex,\n    tickUpperIndex: position.tickUpperIndex,\n    slippageTolerance: Percentage.fromFraction(1, 100),\n});\n"})}),"\n",(0,n.jsx)(i.h3,{id:"other-parameters",children:"Other Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"whirlpool"})," - PublicKey of the whirlpool the position is a part of"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"position"})," - PublicKey of the position address. Derivable from PDAUtil.getPosition."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"positionTokenAccount"})," - Associated token address of the position token on the user's wallet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"tokenOwnerAccount A, B"})," - Associated token address of the tokenA,B on the user's wallet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"tokenVaults A, B"})," - PublicKey of the token vaults for this"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"tickArrayLower, Upper"})," - Lower & upper tick-array accounts that contains the tick indices for the lower, upper bound of the position"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"positionAuthority"})," - The address that hosts the position token. This authority must sign the transaction."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"sample-code",children:"Sample Code"}),"\n",(0,n.jsx)(i.h3,{id:"increase-liquidity-example",children:"Increase liquidity example"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-tsx",children:"const whirlpool = await fetcher.getPool(whirlpoolAddress);\nconst position = await fetcher.getPosition(positionAddress);\n// 10 tokens of a token with 6 decimals\nconst depositTokenBAmount = new BN(10_000_000);\nconst depositQuote = increaseLiquidityQuoteByInputTokenWithParams({depositTokenBAmount, ...});\n\nawait toTx(ctx, WhirlpoolIx.increaseLiquidityIx(ctx.program, {\n    ...depositQuote,\n    whirlpool: whirlpoolAddress,\n    positionAuthority: provider.wallet.publicKey,\n    position: positionAddress,\n    positionTokenAccount,\n    tokenOwnerAccountA,\n    tokenOwnerAccountB,\n    tokenVaultA: whirlpool.tokenVaultA,\n    tokenVaultB: whirlpool.tokenVaultB,\n    tickArrayLower: position.tickArrayLower,\n    tickArrayUpper: position.tickArrayUpper,\n})).buildAndExecute();\n"})}),"\n",(0,n.jsx)(i.h3,{id:"decrease-liquidity-example",children:"Decrease liquidity example"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-tsx",children:"const whirlpool = await fetcher.getPool(whirlpoolAddress);\nconst position = await fetcher.getPosition(positionAddress);\nconst removalQuote = decreaseLiquidityQuoteByLiquidityWithParams({...});\n\nawait toTx(ctx, WhirlpoolIx.decreaseLiquidityIx(ctx.program, {\n    ...removalQuote,\n    whirlpool: whirlpoolAddress,\n    positionAuthority: provider.wallet.publicKey,\n    position: positionAddress,\n    positionTokenAccount,\n    tokenOwnerAccountA,\n    tokenOwnerAccountB,\n    tokenVaultA: whirlpool.tokenVaultA,\n    tokenVaultB: whirlpool.tokenVaultB,\n    tickArrayLower: position.tickArrayLower,\n    tickArrayUpper: position.tickArrayUpper,\n})).buildAndExecute();\n"})}),"\n",(0,n.jsx)(i.h2,{id:"common-errors",children:"Common Errors"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"LiquidityZero"})," (0x177c) - Provided liquidity amount is zero."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"LiquidityTooHigh"})," (0x177d) - Provided liquidity exceeds u128::max."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"TokenMaxExceeded"})," (0x1781) - The required token to perform this operation exceeds the user defined amount in increase_liquidity."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"TokenMinSubceeded"})," (0x1782) - The required token to perform this operation subceeds the user defined amount in decrease_liquidity."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"TickNotFound"})," (0x1779) - The provided tick array accounts do not contain the tick specified in the position."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"ConstraintRaw"})," (0x7d3) - TokenVault, TokenAccount mints does not match the values in the provided whirlpool."]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);